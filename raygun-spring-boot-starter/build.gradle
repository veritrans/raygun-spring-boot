plugins {
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'com.diffplug.spotless' version '6.12.0'
    id 'java'
    id 'maven-publish'
    id 'signing'
    id 'pmd'
    id 'jacoco'
    id 'net.razvan.jacoco-to-cobertura' version '1.2.0' //can only be applied after the java plugin
    id 'org.barfuin.gradle.jacocolog' version '3.1.0'
}

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
    registerFeature('webMvcSupport') {
        usingSourceSet(sourceSets.main)
    }
    registerFeature('webServicesSupport') {
        usingSourceSet(sourceSets.main)
    }
    withSourcesJar()
    withJavadocJar()
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.boot:spring-boot-dependencies:2.7.18'
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-autoconfigure'
    implementation 'org.springframework:spring-test'
    implementation 'com.mindscapehq:core:3.0.0'

    webMvcSupportImplementation 'org.springframework:spring-webmvc'
    webMvcSupportCompileOnly 'jakarta.servlet:jakarta.servlet-api'
    webServicesSupportImplementation 'org.springframework.ws:spring-ws-core'

    testImplementation 'org.springframework.boot:spring-boot-test-autoconfigure'
    testImplementation 'jakarta.servlet:jakarta.servlet-api'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation 'org.assertj:assertj-core'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
}

spotless {
    java {
        googleJavaFormat()
        importOrderFile rootProject.file('raygun-spring-boot-starter.importorder')
        licenseHeaderFile rootProject.file('LICENSE_TEMPLATE.txt')
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

pmd {
    ruleSets = ["category/java/bestpractices.xml"]
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.9
            }
        }
    }
}

javadoc {
    (options as StandardJavadocDocletOptions)
        .tags(
            "apiNote:a:API Notes:",
            "implSpec:a:Implementation Specifications:",
            "implNote:a:Implementation Notes:"
        )
        .setMemberLevel(JavadocMemberLevel.PACKAGE)
}

publishing {
    publications {
        maven(MavenPublication) {
            suppressAllPomMetadataWarnings()
            from components.java
            groupId 'com.midtrans'
            artifactId 'raygun-spring-boot-starter'
            version '0.7.1'
            pom {
                name = 'Raygun Spring Boot Starter'
                description = 'Spring Boot Starter for Raygun'
                inceptionYear = '2022'
                url = 'https://github.com/veritrans/raygun-spring-boot'
                packaging = 'jar'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0'
                    }
                }
                organization {
                    name = 'Midtrans'
                    url = 'https://midtrans.com'
                }
                developers {
                    developer {
                        name = 'Raydhitya Yoseph'
                        email = 'raydhitya.yoseph@gojek.com'
                        timezone = 'Asia/Jakarta'
                        organization = 'Midtrans'
                        organizationUrl = 'https://midtrans.com'
                        roles = ['developer']
                    }
                }
                scm {
                    connection ='scm:git:git://github.com:veritrans/raygun-spring-boot.git'
                    developerConnection = 'scm:git:ssh://github.com:veritrans/raygun-spring-boot.git'
                    url = 'https://github.com/veritrans/raygun-spring-boot'
                }
                issueManagement {
                    system = 'GitLab'
                    url = 'https://github.com/veritrans/raygun-spring-boot/issues'
                }
            }
        }
    }
    repositories {
        maven {
            name 'companySnapshot'
            url providers.environmentVariable('COMPANY_SNAPSHOT_MAVEN_REPOSITORY_URL').getOrNull()
            allowInsecureProtocol true
            credentials {
                username = providers.environmentVariable('COMPANY_MAVEN_REPOSITORY_USERNAME').getOrNull()
                password = providers.environmentVariable('COMPANY_MAVEN_REPOSITORY_PASSWORD').getOrNull()
            }
        }
        maven {
            name 'companyRelease'
            url providers.environmentVariable('COMPANY_RELEASE_MAVEN_REPOSITORY_URL').getOrNull()
            allowInsecureProtocol true
            credentials {
                username = providers.environmentVariable('COMPANY_MAVEN_REPOSITORY_USERNAME').getOrNull()
                password = providers.environmentVariable('COMPANY_MAVEN_REPOSITORY_PASSWORD').getOrNull()
            }
        }
        maven {
            name 'centralSnapshot'
            url providers.environmentVariable('CENTRAL_SNAPSHOT_MAVEN_REPOSITORY_URL').getOrNull()
            credentials {
                username = providers.environmentVariable('CENTRAL_MAVEN_REPOSITORY_USERNAME').getOrNull()
                password = providers.environmentVariable('CENTRAL_MAVEN_REPOSITORY_PASSWORD').getOrNull()
            }
        }
        maven {
            name 'centralRelease'
            url providers.environmentVariable('CENTRAL_RELEASE_MAVEN_REPOSITORY_URL').getOrNull()
            credentials {
                username = providers.environmentVariable('CENTRAL_MAVEN_REPOSITORY_USERNAME').getOrNull()
                password = providers.environmentVariable('CENTRAL_MAVEN_REPOSITORY_PASSWORD').getOrNull()
            }
        }
    }
}

signing {
    useInMemoryPgpKeys(
        providers.environmentVariable('GPG_SECRET_KEY').getOrNull(),
        providers.environmentVariable('GPG_PASSPHRASE').getOrNull()
    )
    sign publishing.publications.maven
}
